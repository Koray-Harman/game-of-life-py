# generate new grid with specified dimensions - calls grid_maker
TESTGAME = Gameoflife(cells, rows)
	
	# generate new grid with specified dimensions
	grid_maker(width, height)

# overide specific cell value within grid 
TESTGAME.set_cell(row_index, cell_index, value)

# overide all cell values with specific value within grid
TESTGAME.set_all_values(value)

# print grid array with borders 
TESTGAME.glossy_grid()

# count living neighbours for cell
TESTGAME.count_live_neighbours(cell_index, row_index)

# overide all cell values with random True/False value
TESTGAME.randomise_all_values()

# generate new grid state based on GoL rules
TESTGAME.gol_next_grid()

# define next generation grid, replace grid with generated grid
TESTGAME.next_generation()

# check if x value is within grid boundary
TESTGAME.is_valid_x()

# check if y value is within grid boundary
TESTGAME.is_valid_y()

# check if given cell is alive
TESTGAME.is_alive(cells_x, rows_y):

# convert grid to array of living neighbour count
TESTGAME.iterate_living_neighbours():

#generate next grid and replace default grid - run gol_next_grid and next_generation
TESTGAME.gol_transition_grid():